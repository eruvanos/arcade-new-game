# based on https://electricui.com/blog/github-actions#summary
name: .publish

permissions:
  contents: write

on:
  push:
    tags:
      - '*'

jobs:

  build:

    # Build on Linux, Windows and MacOS
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - run: |
          uv python install
          uv sync

      - name: build_windows
        if: matrix.os == 'windows-latest'
        env:
          ARCADE_HEADLESS: True
        run: |
          uv run cxfreeze build_exe
          
          # os agnostic zip
          uv run python -c 'import os; os.mkdir("./dist")'
          uv run python -c 'import shutil; shutil.make_archive("dist/mygame", "zip", "build/exe")'

      - name: build_linux
        if: matrix.os == 'ubuntu-latest'
        env:
          ARCADE_HEADLESS: True
        run: |
          sudo apt update
          sudo apt install python3-pip mesa-utils libegl1-mesa xvfb
          uv run pyinstaller \
          --onefile \
          -y \
          --windowed \
          --name MyGame \
          --icon "mygame/resources/logo.ico" \
          --add-data=mygame/resources:mygame/resources \
          mygame/__main__.py
          
          # os agnostic zip
          uv run python -c 'import shutil; shutil.make_archive("dist/mygame", "tar", "dist/", "MyGame")'
          
          # remove the old artefact
          rm -rf dist/MyGame

      - name: build-bdist_mac
        if: matrix.os == 'macos-latest'
        env:
          ARCADE_HEADLESS: True
        run: |
          uv run cxfreeze bdist_dmg
          
          # move the dmg to the dist folder
          mkdir dist
          mv build/MyGame.dmg dist/

      # Upload the end-user binary artifact
      - uses: actions/upload-artifact@v4
        with:
          name: mygame-${{ matrix.os }}
          path: dist/*
          retention-days: 1

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: Display fetched artifacts
        run: ls -R

      - name: rename artifacts
        run: |
          mkdir release
          mv mygame-ubuntu-latest/mygame.tar release/mygame-linux-${{ github.ref_name }}.tar
          mv mygame-windows-latest/mygame.zip release/mygame-windows-${{ github.ref_name }}.zip
          mv mygame-macos-latest/MyGame.dmg release/mygame-macos-${{ github.ref_name }}.dmg

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes \
              release/*
